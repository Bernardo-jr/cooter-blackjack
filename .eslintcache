[{"/home/bernardorios/react/git-repository/cooter-blackjack/src/index.js":"1","/home/bernardorios/react/git-repository/cooter-blackjack/src/App.js":"2","/home/bernardorios/react/git-repository/cooter-blackjack/src/reportWebVitals.js":"3","/home/bernardorios/react/git-repository/cooter-blackjack/src/componentes/partida.js":"4","/home/bernardorios/react/git-repository/cooter-blackjack/src/componentes/carta.js":"5"},{"size":547,"mtime":1611147382595,"results":"6","hashOfConfig":"7"},{"size":110,"mtime":1611255389258,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611146383544,"results":"9","hashOfConfig":"7"},{"size":6153,"mtime":1611331683232,"results":"10","hashOfConfig":"7"},{"size":1077,"mtime":1611233132110,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"10dhdii",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bernardorios/react/git-repository/cooter-blackjack/src/index.js",[],["24","25"],"/home/bernardorios/react/git-repository/cooter-blackjack/src/App.js",[],"/home/bernardorios/react/git-repository/cooter-blackjack/src/reportWebVitals.js",[],"/home/bernardorios/react/git-repository/cooter-blackjack/src/componentes/partida.js",["26"],"import {Component} from 'react';\nimport pichonImg from '../pichon.png';\nimport cooterImg from '../COOTER.png';\nimport Carta from './carta';\nimport {Container,Row,Col,Button,Card} from 'react-bootstrap';\nconst initialState = {\n    pichon:[],\n    puntosPichon:0,\n    asPichon:false,\n    fin:false,\n    casa:[],\n    puntosCasa:0,\n    asCasa:false,\n};\nconst valores=[\"A\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"J\",\"Q\",\"K\"];\nconst  palos=[\"♣\" , \"♠\", \"♥\" , \"♦\" ];\nexport default class Partida extends Component{\n\n    \n    numero=0;\n    index=0;\n    constructor(props){\n        super(props);\n        this.state=initialState;\n        this.getCard=this.getCard.bind(this);\n        this.plantarse=this.plantarse.bind(this);\n        this.refresh=this.refresh.bind(this);\n    }\n    //evento inicial\n    async componentDidMount(){\n        await this.getCard(null,false);\n        await this.getCard(null,true);\n        await this.getCard(null,false);\n        await this.getCard(null,true);\n    }\n    //El pichon se planta\n    async plantarse(){\n      var aux=this.state.casa;\n      aux.forEach((c)=>{\n        c.visible=true;\n      });\n      await this.setState({\n        fin:true,\n        casa:[...aux]\n      });\n    if(this.state.puntosPichon<21){\n      while(this.state.puntosCasa<17){\n        aux=this.state.casa;\n        await this.getCard(null,this.state.casa,this.state.puntosCasa);\n      }\n    }\n    }\n   //reinicia la mano \n   async refresh(){\n       await this.setState({...initialState,casa:[],pichon:[]});\n        this.componentDidMount();\n    }\n    \n  //cuenta los puntos   \n  async contar(pts,as){\n      let p=pts;\n      if(\"JQK\".includes(this.numero)){\n        p=p+10;\n        if(p>21&& as){\n          p=p-10;\n          as=false;\n        }\n      }else if(this.numero.includes(\"A\")){\n        if(p+11>21){\n          p=p+1;\n        }else{\n          as=true;\n          p=p+11;\n        }\n      }else{\n          p=p+parseInt(this.numero);\n          if(p>21&& as){\n            p=p-10;\n            as=false;\n          }\n      }\n      return [p,as];\n    }\n    //valida que no se repitan las cartas\n    async validar(){\n      var exist=false;\n      await this.state.casa.forEach((c)=>{\n        if(c.numero===this.numero && c.index===this.index){\n          exist=true;\n        }\n      });\n      await this.state.pichon.forEach((c)=>{\n        if(c.numero===this.numero && c.index===this.index){\n          exist=true;\n        }\n      });\n      console.log(exist);\n      return exist;\n    }\n    //pide una carta\n    async getCard(e,esCasa){\n        this.index=Math.floor(Math.random() * palos.length);\n        this.numero=valores[Math.floor(Math.random() * valores.length)];\n        var exist=false;\n        exist= await this.validar();\n\n        while(exist){\n          this.index=Math.floor(Math.random() * palos.length);\n          this.numero=valores[Math.floor(Math.random() * valores.length)];\n         exist = await this.validar();\n        }\n\n      var c,aux;\n      if(esCasa){\n        c=this.state.casa; \n        aux=await this.contar(this.state.puntosCasa,this.state.asCasa);\n        if(c.length===0 || this.state.fin){\n          c.push({numero:this.numero,index:this.index,visible:true});\n        }else{\n          c.push({numero:this.numero,index:this.index,visible:false});\n        }\n        await this.setState({casa:[...c],puntosCasa:parseInt(aux[0]),asCasa:aux[1]});\n        if(this.state.puntosCasa>=21)\n        this.plantarse(null);\n      }else{\n        c=this.state.pichon; \n        var points=this.state.puntosPichon;\n        aux=await this.contar(points,this.state.asPichon);\n        c.push({numero:this.numero,index:this.index});\n        await this.setState({pichon:[...c],puntosPichon:parseInt((aux[0])),asPichon:aux[1]},()=>{return this.puntosPichon;});\n        if(this.state.puntosPichon>=21)\n        this.plantarse(null);\n      }\n    }\n\n\n    render(){\n        return( \n        <Container bg='#' style={{padding:'1.5rem 0'}}>\n        <img className='left' height='240' src={cooterImg} style={{position:'absolute',margin:'2rem 0'}} />\n        <Row style={{padding:'2rem 0', minHeight:'18rem'}} className=\"justify-content-md-center\">   \n        {this.state.casa.map((card,i)=>{\n          return (card.visible)\n          ?<Col xs lg=\"2\" key={i}><Carta numero={card.numero} palo={palos[card.index]} color={card.index<=1?'text-black':'text-danger'} /></Col> \n          :<Col xs lg=\"2\" key={i}><Card border='dark' style={{ width: '10rem',height:'15rem',padding:'0.125rem' }} className=\"justify-content-md-center\">\n              <Card.Img src={pichonImg} />\n          </Card></Col>\n\n        })}\n        </Row>\n        <Row style={{minHeight:'2rem'}} className=\"text-warning justify-content-md-center\">\n          {\n            (this.state.fin)\n            ?(this.state.puntosPichon>21 || (this.state.puntosCasa<=21 && this.state.puntosCasa>this.state.puntosPichon))\n            ?<Col xs lg=\"4\" className=\"text-center\"><h3>Te bailé sabroso</h3></Col>\n            :(this.state.puntosPichon===this.state.puntosCasa)\n            ?<Col xs lg=\"4\" className=\"text-center\"><h3>Desempate ?</h3></Col>\n            :<Col xs lg=\"4\" className=\"text-center\"><h3>Caimos ante el mejor </h3></Col>\n            :<Col></Col>\n          }\n        </Row>\n        <Row style={{padding:'2rem 0', minHeight:'18rem'}}  className=\"justify-content-md-center\">   \n        {this.state.pichon.map((card,i)=>{\n          return <Col xs lg=\"2\" key={i}>\n                  <Carta numero={card.numero} palo={palos[card.index]} color={card.index<=1?'text-black':'text-danger'} />\n                </Col> \n        })}\n        </Row>\n        <Row className=\"justify-content-md-center\">\n        <Button variant={(this.state.fin)?'outline-warning':'warning'} onClick={(e)=>(this.state.fin)?null:this.getCard(e,false)}>Dame Carta</Button>&nbsp;\n        <Button variant={(this.state.fin)?'outline-warning':'warning'} onClick={(e)=>(this.state.fin)?null:this.plantarse(e)} >Plantarse</Button>&nbsp;\n        <Button variant={(!this.state.fin)?'outline-warning':'warning'} onClick={(e)=>(!this.state.fin)?null:this.refresh(e)} >Repartir</Button>&nbsp;\n        </Row>\n      </Container>)\n    };\n}","/home/bernardorios/react/git-repository/cooter-blackjack/src/componentes/carta.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":140,"column":9,"nodeType":"33","endLine":140,"endColumn":108},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]